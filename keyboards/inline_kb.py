from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData

from lexicon.lexicon_ru import LEXICON

_TEMP = dict(zip(range(1,11), '–ê–ë–í–ì–î–ï–ñ–ó–ò–ö'))

class UsersCallbackFactory(CallbackData, prefix='user'):
    x: str
    y: int

def create_user_kb(
        lst: list,
        *args: str
                   ) -> InlineKeyboardMarkup:
    '''
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–ª–æ—Ç–æ–º –∏–≥—Ä–æ–∫–∞
    '''
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
    kb_builder = InlineKeyboardBuilder()
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons: list[InlineKeyboardButton] = [
        InlineKeyboardButton(
            text=_TEMP[y + 1]+str(x + 1) if lst[y][x] == 0 else 'üü´' if lst[y][x] == 1 else 'üü•',
            callback_data='user'+str(y)+str(x)
        )
        for y in range(len(lst))
        for x in range(len(lst[0]))
    ]
    width = len(lst)
    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –±–∏–ª–¥–µ—Ä –º–µ—Ç–æ–¥–æ–º row c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º width
    kb_builder.row(*buttons, width=width)

    if args:
        for button in args:
            kb_builder.row(InlineKeyboardButton(
                text=LEXICON[button] if button in LEXICON else button,
                callback_data=button))

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return kb_builder.as_markup()


def create_comp_kb(
        lst: list,
        *args: str
                   ) -> InlineKeyboardMarkup:
    '''
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–ª–æ—Ç–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
    '''
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∏–ª–¥–µ—Ä
    kb_builder = InlineKeyboardBuilder()
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons: list[InlineKeyboardButton] = [
        InlineKeyboardButton(
            text=_TEMP[y + 1]+str(x + 1) if lst[y][x] in (0, 1) else 'üåä' if lst[y][x] == 3 else 'üü•',
            callback_data='comp'+str(y)+str(x)
        )
        for y in range(len(lst))
        for x in range(len(lst[0]))
    ]
    width = len(lst)
    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –±–∏–ª–¥–µ—Ä –º–µ—Ç–æ–¥–æ–º row c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º width
    kb_builder.row(*buttons, width=width)

    if args:
        for button in args:
            kb_builder.row(InlineKeyboardButton(
                text=LEXICON[button] if button in LEXICON else button,
                callback_data=button))

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return kb_builder.as_markup()